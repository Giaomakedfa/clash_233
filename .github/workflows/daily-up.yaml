name: "clash proxy provider 2"
on:
  schedule:
    - cron: '0 */8 * * *'  
  workflow_dispatch:
jobs:
  job_1:
    name: collect proxies
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
    - uses: actions/checkout@v3
    - name: time_a
      run: |
        echo $(date "+%s") > time_a
        [ "${GITHUB_ACTOR}" ] && user="${GITHUB_ACTOR}"  || user="jw853355718"
        git config --global user.name "$user" 
        git config --global user.email "${user}@users.noreply.github.com"
    - name: cloudflare warp
      continue-on-error: true 
      run: |
          set +e
          touch warp.sh; chmod 755 ./warp.sh 
          touch run.sh; chmod 755 ./run.sh 
          warp_url="https://raw.githubusercontent.com/P3TERX/warp.sh/main/warp.sh"
          curl -s -o warp.sh $warp_url && chmod 755 ./warp.sh || exit 1         
          cat >run.sh<<-\EOF
          #!/bin/bash
          [ -f warp.tgz ] && tar xzvf warp.tgz -C /
          ./warp.sh d
          . ./warp.sh
          tar zcvf warp.tgz $WGCF_ProfilePath $WireGuard_ConfPath
          chmod 666 warp.tgz
          m=3
          i=1
          while [ 1 ];do
          r4=0
          r6=0
          ping -c1 -W1 $TestIPv4_1 || ping -c1 -W1 $TestIPv4_2 || r4=1         
          ping6 -c1 -W1 $TestIPv6_1 || ping6 -c1 -W1 $TestIPv6_2 || r6=1
          if [ "a00" = "a$r4$r6" ]; then touch warp_on; chmod 666 warp_on; break ;fi
          if [ $i -lt $m ]; then i=$(( $i + 1)); ./warp.sh rwg; continue; fi
          ./warp.sh x
          break
          done
          EOF
          chmod 755 ./run.sh
          timeout 15m sudo ./run.sh  > warp.log || sudo ./warp.sh x  
    - name: update pool 
      continue-on-error: true 
      run: |
        cat >prepare.sh<<-\FFF
        #!/bin/bash
        set +e
        date
        show_ip(){
        echo 'quering ip'
        (curl -m 15 --doh-url https://dns.google/dns-query -s http://api64.ipify.org && echo ' ip q done'|| echo 'ip q timeout') &
        }
        show_ip
        if [ ! -e ipvenv ]; then
        python -m venv ipvenv
        fi
        . ipvenv/bin/activate
        python -m pip install maxminddb & 
        p=$!
        echo virtual env activate
        date
        if [ 1 ];then
        cat >>pool_etc<<-EEE
        https://raw.githubusercontent.com/pojiezhiyuanjun/freev2/master/$(date '+%m%d')clash.yml
        https://nodefree.org/dy/$(date '+%Y/%m/%Y%m%d').yaml
        EEE
        fi
        down_from_list() {
        for url in $(awk '!a[$0]++' $1);do
        filename=tmp_1$RANDOM.yaml
        echo GET $url TO $filename
        ( curl -k -s -o $filename $url  && echo $filename job done || echo $url failed)&
        p="$! $p"
        done
        }
        [ $(date +%H | sed 's/^0//') -gt 15 ] && down_from_list pool_etc || touch tmp_0.yaml
        if [  ! -f clash ]; then
        os_type=linux
        cpu_type=amd64
        clash_r_url="https://github.com/Dreamacro/clash/releases"        
        clash_bin_url=https://github.com$( curl -s $clash_r_url | grep '.gz' | grep '<a href=' | grep $os_type | head | grep $cpu_type | sed -E 's/.*href="([^"]*)".*/\1/' |head -n1)
        curl -L -s -o clash.gz $clash_bin_url
        gunzip clash.gz
        chmod a+x clash && ./clash -v && git add clash || git checkout clash
        fi
        [ ! -x clash ] && chmod a+x clash
        for i in $p;do
        wait $i
        done
        date
        FFF
        timeout 15m bash ./prepare.sh > prepare.log || exit 1
        touch p_t
        cat prepare.log
    - name: update repo
      continue-on-error: true 
      run: | 
        [ -f p_t ] || exit 1
        uuid=`cat  /proc/sys/kernel/random/uuid`
        export np=$(date '+%m%d%Y')${uuid:0:4}-
        cat >check.sh<<-\EEE
        #!/bin/bash
        set +e 
        . ipvenv/bin/activate        
        echo working dir is `pwd`
        if [ ! "$mode" ] && [ "$2" ];then
          mode=2
        fi
        if [ ! "$mode" ] && [ "$1" ];then
          mode=1
          sd=$1 # alias for func
          [ ! -e x.yaml ] && ln speed_short.yaml x.yaml && echo "Warning: speed_short.yaml as x.yaml with pre-server $1" 1>&2
          [ ! -f check-list.txt ] && gawk '{if(match($0,/("name":"[^"]*")/,a) && match(a[1],/:"[^_]*_([^_]*)_[^"]*"/,b) && !c[b[1]]++)print a[1]}' last_g.txt cde_*.txt x.yaml > check-list.txt
        fi
        if [ ! "$mode" ];then
          mode=0
        fi
        if [ "$mode" = 0 ];then
        echo 'ipv6: true' > 1.yaml
        if [ ! "$np" ];then
        uuid=`cat  /proc/sys/kernel/random/uuid`
        export np=$(date '+%Y%m%d')${uuid:0:4}-
        fi
        cat >mixn.awk<<-\FFF
        BEGIN{ aFS="\42name\42:" }
        { file[NR]=$0; closed[$0]=0 }
        END{
          n=NR
          n_fd=0
          for (i in closed) n_fd++
          while ( 1 ){
            sum_closed=0
            for (i=1;i<=n;i++){
              if (! closed[file[i]] ){
                if ((getline line < file[i] ) > 0){
                    if ( raw ) {    print line
                    }else{          if (split(line,a,aFS) && 2 in a && !b[a[1]]++ && !c[a[2]]++)print line}
                }else{ 
                    close(file[i])
                    closed[file[i]]=1}
              }               
            }
            for (fn in closed) sum_closed+=closed[fn]
            if(sum_closed == n_fd) break
          }
        }
        FFF
        gawk 'BEGIN{print "proxies:"}{if (match($0,/"name":"[^_"]*_([^_]*)_[^_"]*"/,ip)&&!b[ip[1]]++) {if( ! match(ip[1],/:/)){c=gensub(/server: [^,]*/,"server: "ip[1],"g") ;print c}else{print}}}' speed_short.yaml > speed_ip.yaml
        if [ 1 ];then
        echo -e 'speed_ip.yaml\nconfig.yml'| gawk -f mixn.awk
        cat config.yml speed_*.yaml speed.yaml
        fi | gawk -F '"name":' 'BEGIN{print "proxies:"}{if(NF > 1 && !a[$1]++)print}' > database.yaml
        cp config.yaml database_2.yaml
        cat >gen.awk<<-\EOF
        BEGIN{
          database="database.yaml"
          print "proxies:"
          g="1.yaml"
          h="./clash -t -f 1.yaml 1>/dev/null && echo t || echo f";
          h|getline tf;
          qi=0
          close(h)
        }
        {if(qi > 23333) exit
        if(match($0,/type: ([^,]*)/,tt) && match($0,/server: ([^,]*)/,ss)){
           if( !(ss[1]tt[1] in rr) )rr[ss[1]tt[1]]=0
           pg=1
         }else pg=""
        if( pg && rr[ss[1]tt[1]] < 3 && !a[$0]++){
          if(database_closed){
            d="\42name\42:\42_" np qi tt[1] "\42"
          }else{
            while(1){
              if((getline dl < database) > 0){
                if(match(dl,/"name":"[^_]*_[^_]*_([^_-]*-)/,mp) && d="\42name\42:\42_" mp[1] qi tt[1] "\42" ) break
                else continue 
              }else{
                close(database) ; database_closed=1 ; d="\42name\42:\42_" np qi tt[1] "\42"; break }     
            }
          }
          p="  - {" $0 "," d "}";
          print "proxies:\n"p > g;close(g);
          h|getline r;close(h);
          if(index(r,"t") && ++rr[ss[1]tt[1]] && ++qi)print p
        }}
        END{
        print NR " records IN, " qi " records OUT" | "cat 1>&2" 
        }
        EOF
        cat >sub.sed<<-\EOF
        s/ [^ ]*: \{\},//g
        s!alterId: "([0-9]+)"!alterId: \1!
        s!ws-path: ([^,]*)!ws-opts: {path: \1}!
        s/ !<str> ([0-9]+)/ "\1"/g
        s/password: ([0-9]+),/password: "\1",/g
        s/server: ["']?\[?([0-9a-fA-F:]+)]?["']?/server: \1/
        s/^  - \{//
        s/\}$//
        EOF
        for j in database*.yaml $(ls -s tmp*.yaml | sort | awk '{print $2}') ; do
        echo processing  $j >&2
        grep -q -e 'name: [^,]*, server: ' $j && cmd1="sed -E 's/name: [^,]*, server: /server: /' $j" || cmd1="cat $j"
        eval $cmd1 | yq -M 'del(.rules) | del(.proxies.[].name) | del(.proxies.[].udp) | del(.proxies.[].sni) | del(.proxies.[].servername) | del(.proxies.[].country) | del (.proxies.[].group) | del(.proxies.[].index) | del(.proxies.[].ws-opts.headers) | del(.proxies.[].ws-headers) | sort_keys(.proxies.[])| ... style = "" | .proxies.[] style="flow"' | awk 'index($0,"port")&&index($0,"server")' |sed -E -f sub.sed >raw_$j  
        echo $j end  processing $? >&2
        done
        if [ 1 ];then
        cat raw_database.yaml
        ls -s raw_database_*.yaml raw_tmp*.yaml | sort | awk '{print $2}' | gawk -v raw=1 -f mixn.awk 
        fi | gawk -v np="$np" -f gen.awk | python add_ip.py | sed -E 's!"([^"]*)"}#([^#]*)#([^#]*)$!"\2_\3\1"}!' > x.yaml
        gawk  -F '"name":' 'NF == 2 && index($2,"\42CN_") && !b[$1]++ && !a[$2]++' database*.yaml x.yaml > cdn.yaml
        gawk '{if(match($0,/("name":"[^"]*")/,a) && !index(a[1],"_None_"))print a[1]}' x.yaml | grep -v CN_ > check-list.txt
        fi # END of mode 0
        if [ 1 ];then
        cat >kw.txt<<-EOF
        microsoft
        bing
        baidu
        sogou
        weibo
        zhihu
        bilibili
        qq
        cctv
        jd
        taobao
        sohu
        ifeng
        huanqiu
        douyu
        douyin
        toutiao
        wps
        weixin
        zhibo8
        meituan
        kugou
        EOF
        limit=20
        i=0
        tls='s';[ "$mode" != 0 ] && [ ! -f warp_blocked ] && t_s=0 || t_s=1
        for kwi in $(awk '!a[$0]++' kw.txt);do
        curl -I -s http${tls:0:$t_s}://${kwi}.com > /dev/null || continue
        i=$(($i + 1))
        eval kw$i=$kwi  
        [ $i -eq $limit ] && break 
        done
        [ $i -eq 0 ] && exit 1
        max_worker=$i
        seed=$(cat /proc/sys/kernel/random/uuid | sed  -E 's/[^0-9]*//g')
        mport=$((1$seed % 100 + 10305))
        dns_port=$(($mport + 1))
        cat <<-EOF
        mixed-port: $mport
        ipv6: true
        mode: rule
        #log-level: silent
        proxy-providers:
         px:
          type: file
          interval: 9600
          path: x.yaml
          health-check:
            enable: false
            interval: 600
            url: http${tls:0:$t_s}://www.gstatic.com/generate_204
        dns:
          enable: true
          listen: 0.0.0.0:${dns_port}
          ipv6: true
          default-nameserver:
            - 8.8.4.4
            - 8.8.8.8
          # enhanced-mode: redir-host   
          enhanced-mode: fake-ip
          fake-ip-range: 198.18.0.1/16
          nameserver:
            - 8.8.4.4
            - 8.8.8.8
            - tls://dns.google:853
            - https://dns.google/dns-query
        EOF
        [ "$mode" = 0 ] && SR="S"
        [ "$mode" = 1 ] && SR="R"
        [ "$mode" = 2 ] && SR="R"       
        echo "rules:"; for i in `seq $max_worker`; do kw=$(eval echo '$kw'$i)
        echo "          - DOMAIN-KEYWORD,$kw,${SR}${i}";done
        echo "          - MATCH,REJECT"
        echo "proxy-groups:";
        [ "$mode" = 1 ] && [ $SR = R ]  && echo "          - {name: S0, type: select, use: [px], proxies: [DIRECT]}" || :
        for i in `seq $max_worker`; do
          if [ "$mode" = 0 ];then
            echo "          - {name: S$i, type: select, use: [px]}"
          fi
          if [ "$mode" = 1 ];then
            [ ! -f GOT_WHAT_DOES_THIS_DO ] && SS="S$i,S0,S$i" || SS="S0,S$i"
            echo "          - {name: S$i, type: select, use: [px]}"
            echo "          - {name: R$i, type: relay, proxies: [$SS]}" 
          fi
          if [ "$mode" = 2 ];then
            [ ! -f GOT_WHAT_DOES_THIS_DO ] && SS="S$i,T$i,S$i" || SS="T$i,S$i"
            echo "          - {name: S$i, type: select, use: [px]}"
            echo "          - {name: T$i, type: select, use: [px]}" 
            echo "          - {name: R$i, type: relay, proxies: [$SS]}" 
          fi
        done
        fi > y.yaml
        ./clash -t -f y.yaml -d . || error_config=1
        if [ "$error_config" ];then cat y.yaml; exit 1;fi
        port=$((2$seed % 100 + 20406))
        ./clash -d . -f y.yaml  -ext-ctl "127.0.0.1:$port" >>clash.log &
        clash_pid=$!
        # curl -s  http://127.0.0.1:$port/providers/proxies| awk -F, 'BEGIN{RS="(,\42delay\42)|(,\42udp\42)"}{if(NF == 3 && !match($1,/:0/))print $2 > "goodz.txt"}' # may change with new version of clash
        # use above cmd to get proxies alive , maybe bad
        [ "$mode" != 0 ] && c_timeout=11 || c_timeout=7
        [ "$mode" != 0 ] && timeout=15 || timeout=11
        try_n=0
        proxy="http://127.0.0.1:$mport"
        peer()
        {
        data=$2
        num=$1
        good="good$num.txt"
        bad="bad$num.txt"
        if [ "$mode" = 2 ]; then
          p2=$(echo "$data" | awk '{print $2}')
          p1=$(echo "$data" | awk '{print $1}')
          t_p2=$(curl -s -X PUT -w "%{http_code}" -d "{$p2}" "http://127.0.0.1:$port/proxies/T$num")
          [ "$t_p2" = "204" ] || return 1        
          data=$p1
        fi
        url=$(eval echo http${tls:0:$t_s}://'$kw'${num}.com)
        [ "a$t_s" = "a0" ] && p_p=80 || p_p=443
        domain=$(eval echo '$kw'${num}.com)
        t=$(curl -s -X PUT -w "%{http_code}" -d "{$data}" "http://127.0.0.1:$port/proxies/S$num")
        [ "$t" = "204" ] || return 1        
        r2=$(curl -I -s -w "%{http_code} %{time_total}" -o /dev/null --retry $try_n -m $timeout --connect-timeout $c_timeout -x $proxy --resolve ${domain}:${p_p}:198.18.0.${num} $url)
        s=$?
        r=${r2:0:3}
        t_a=${r2:4}
        if [ a200 = "a$r" ] ; then
        file=$good
        elif [ a302 = "a$r" ] ;then
        file=$good
        elif [ a301 = "a$r" ] ;then
        file=$good
        else
        file=$bad
        fi
        [ $good = $file ] && echo $t_a >> delay$num.txt
        echo $data $file $t $r $s $t_a ${sd}${p2} 1>&2
        echo $data >>$file
        [ "$mode" = 2 ] && echo $p2 >>p2_$file
        }
        [ -f queue ] && rm queue
        [ -f read_lock ] && rm read_lock
        mkfifo queue
        exec 99<>queue
        mkfifo read_lock
        exec 66<>read_lock
        clean(){
        rm read_lock queue check-list.txt
        if [ ! "$normal_end" ];then
        kill $p || :
        kill $clash_pid || echo clash exited 
        fi
        ls *.txt
        if [ "$mode" = "0" ];then
        awk 'BEGIN{FS=",";f="speed.yaml";print "proxies:" > f;while("ls good*.txt" | getline g){while ((getline n < g) >0)a[n"}"];close(g)}}{if($NF in a)print $0 >f}' x.yaml
        awk 'BEGIN{print "proxies:"}{if (match($0,/"name":"[^_"]*_([^_]*)_[^_"]*"/,ip)&&!b[ip[1]]++) print}' speed.yaml > speed_short.yaml
        else
        cat good*.txt | awk '!a[$0]++' || :
        fi
        echo clean finished
        }
        trap 'clean' EXIT
        get_lock()
        { read -t 3 -u66 lock && return 0 || return 1 ;}
        drop_lock(){
        echo >&66
        }
        worker(){
        while [ 1 ];do
        get_lock || break
        read -t 1 -u99 data || end=1
        drop_lock
        [ 01 = "0$end" ] && break
        # [ 'done' == "$data" ]  && break
        peer "$1" "$data"
        done&
        }
        if [ $max_worker -ne 0 ];then
        drop_lock
        cat check-list.txt       
        fi>&99 &
        p="$! $p"
        [ "$mode" = 1 ] && sleep 1 && t0=$(curl -s -X PUT -w "%{http_code}" -d "{$1}" "http://127.0.0.1:$port/proxies/S0")
        [ "$mode" != 0 ] && rm good*.txt bad*.txt delay*.txt p2_good*.txt p2_bad*.txt || :
        for i in $(seq $max_worker | sort -R);do
        [ "$mode" = 0 -o "$mode" = 1 ] && sleep 1
        worker $i
        p="$! $p"
        done
        # wait for all workers
        for w in $p;do
        wait $w
        done 
        kill $clash_pid
        normal_end=1
        # check finished
        EEE
        chmod 755 check.sh
        [ -f tmp_0.yaml ] && tta=60 || tta=110
        time_left=$(( $tta - ( $(date '+%s') - $(cat time_a) ) / 60 ))
        [ $time_left -gt 0 ] && timeout ${time_left}m bash ./check.sh || echo "no enough time left ( $time_left m)" > check.log
        if [ $(awk 'END{print NR}' speed_short.yaml) -lt 2 ]; then exit 1;fi      
        [ -f warp_on ] && rm warp_on && sudo ./warp.sh x  || : >> warp.log
        git add speed.yaml speed_short.yaml warp.tgz Country.mmdb
        git pull && echo "pull ok" || echo "pull maybe busy,try commit anyway"
        git commit -m "${np}update"
        git push -u origin master
        time_left=$(( 115 - ( $(date '+%s') - $(cat time_a) ) / 60 ))
        [ $time_left -gt 0 ]  && touch s1_t
    - name: check2
      continue-on-error: true 
      run: |
        [ -f s1_t ] || exit
        cat >check2.sh<<-\EEE
        #!/bin/bash
        rm clash.log || :
        cat >gen-check.awk<<-\FFF
        BEGIN{FS=",";i=0;j=0}
        {
          if (match($NF,/^("name":"[^"]*")/,c)){
            if (index(c[1],"CN_"))
              a[i++]=c[1]
            else 
              b[j++]=c[1]
          }
        }
        END{
          len_a=i;len_b=j
          offset=0
          while(offset < len_a){
            for (j=0;j<len_b;j++){
              print b[j] " " a[ (offset+j) % len_a ]     
            }
            offset++
          } 
        }
        FFF
        limit=5
        i=0
        mode="$1"
        ! [ "$mode" = 2 -o "$mode" = 1 ] && mode=1 # default
        write_i(){
        if [ "$mode" = 2 ];then
        all_server2=$(gawk -v mode=2 -f ./gen2.awk)
        if [ 1 ];then
        cat <<-FFF
          - {name: E0, type: select, proxies: &all [REJECT,DIRECT,${all_server2}]}
          - {name: A0, type: select, use: [ps], proxies: [A1,DIRECT,E0,G0,$(seq ${limit} | awk 'BEGIN{ORS=","}{print "G"$0}') ]}
          - {name: B0, type: select, use: [ps], proxies: [DIRECT,A1,E0,G0,$(seq ${limit} | awk 'BEGIN{ORS=","}{print "G"$0}') ]}
          - {name: G0, type: relay, proxies: [A2,A3]}
          - {name: A3, type: select, proxies: [A5,A4,A2]}
          - {name: A1, type: load-balance, proxies: [$(seq ${limit} | awk 'BEGIN{ORS=","}{print "G"$0}') ], url: &url "http://www.gstatic.com/generate_204", interval: &seconds 600, strategy: &strategy round-robin}
          - {name: A4, type: load-balance, proxies: [$(seq ${limit} | awk 'BEGIN{ORS=","}{print "F"$0}') ], url: *url, interval: *seconds, strategy: *strategy }
          - {name: A2, type: load-balance, proxies: [$(seq ${limit} | awk 'BEGIN{ORS=","}{print "E"$0}') ], url: *url, interval: *seconds, strategy: *strategy }
          - {name: A5, type: load-balance, proxies: *all, url: *url, interval: *seconds, strategy: *strategy} 
        FFF
        for j in $( seq ${limit} );do
        cat <<-FFF
          - {name: E${j}, type: select, use: [ps], proxies: *all}        
          - {name: F${j}, type: select, use: [ps], proxies: *all}        
          - {name: G${j}, type: relay, proxies: [E${j},F${j}]}
        FFF
        done
        fi >>config.yml
        else
        cdn_server=$(gawk -v data=$data 'BEGIN{match(data,/"name":"([^"]*)"/,a);print a[1]}')
        cat >>config.yml<<-FFF
          - {name: B$i, type: select, proxies: [$(gawk -f ./gen2.awk) DIRECT,REJECT]}
          - {name: C$i, type: relay, proxies: [$cdn_server , B$i]}        
          - {name: D$i, type: relay, proxies: [B$i , $cdn_server]}        
        FFF
        fi
        }
        timeout_clean(){
        [ "$(pidof clash)" ] && kill $w
        if ! (tail -n1 config.yml | grep -q "name: D$i")  && (ls *.txt | grep -q good) ;then
        i=$(($i +1))
        write_i
        [ -f warp_blocked ] && [ "$data" ] && echo "$data" >> cdn.txt
        [ "$data" ] && echo "$data" >> cde_$i.txt || :
        (ls *.txt | grep -q good) && awk '!a[$0]++' *good*.txt >> cde_$i.txt || :
        touch yml_good
        fi
        if (ls cde*.txt | grep -q cde);then
        awk 'BEGIN{FS=",";f="speed_cde.yaml";print "proxies:" > f;while("ls cde*.txt" | getline g){while ((getline n < g) >0)a[n"}"];close(g)}}{if($NF in a)print $0 >f}' x.yaml
        fi
        [ -f speed_cde.yaml ] || ls && cat cde*.txt >&2 # cp speed_short.yaml speed_cde.yaml
        # all_server=$(gawk 'BEGIN{ORS=","}{if(match($0,/"name":"([^"]*)"/,a))print a[1]}' speed_cde.yaml)
        if [ "$data" ] && [ $i -gt 0 ];then
        cat >>config.yml<<-FFF
          - {name: A2, type: load-balance, proxies: [$(seq $i | awk 'BEGIN{ORS=","}{print "D"$0}') ], url: "http://www.gstatic.com/generate_204", interval: 600, strategy: round-robin}
          - {name: A1, type: load-balance, proxies: [$(seq $i | awk 'BEGIN{ORS=","}{print "C"$0}') ], url: "http://www.gstatic.com/generate_204", interval: 600, strategy: round-robin}
          - {name: A0, type: select, use: [ps], proxies: [A1,DIRECT,A2, $(seq $i | awk 'BEGIN{ORS=","}{print "B"$0",C"$0}') ]}
          - {name: B0, type: select, use: [ps], proxies: [DIRECT,A2,A1, $(seq $i | awk 'BEGIN{ORS=","}{print "B"$0",D"$0}') ]}
        FFF
        else
          [ 1 ] || :
        fi
        if [ -f speed_cde.yaml ];then
        grep -v 'type: ss' speed_cde.yaml
        grep '"CN_'              speed_cde.yaml
        grep 'type: ss'          speed_cde.yaml
        else
        cat speed.yaml
        fi | awk '!a[$0]++' >> config.yml
        }
        trap 'timeout_clean' EXIT
        cat >gen2.awk<<-\FFF
        function fsp(x,   y,z,i,n){
          n=asorti(x,y)
          for (i = 1; i <= n; i++)
            if ( match(y[i],/"name":"([^"]*)"/,z) )
              print z[1]
        }
        BEGIN{
        ORS="," 
        if( mode == 2 ){
          while(("ls delay*.txt" |getline f) && ("ls good*.txt" | getline g) && ("ls p2_good*.txt" | getline h) ){
            while( (getline t < f) && (getline s < g) &&  (getline r < h) ){
              delay[s]+=t;delay[r]+=t
              count[s]++ ;count[r]++
              a[s]       ;b[r]
              count["all"]+=2
            }         
            close(f);close(g);close(h) 
          }
          for (i in a) c[sprintf("%05d %03d %s",  count["all"] - count[i], delay[i] * 10 / count[i], i)]
          for (i in b) d[sprintf("%05d %03d %s",  count["all"] - count[i], delay[i] * 10 / count[i], i)]
          fsp(c);fsp(d)  
          exit
        }
        ORS="," 
        while(("ls delay*.txt" |getline f) && ("ls good*.txt" | getline g)){
          while( (getline t < f) && (getline s < g) ){
            if( match(s,/"CN_/) ) b[sprintf("%03d %s",t * 10, s)]
            else a[sprintf("%03d %s",t * 10, s)]
          }
          close(f);close(g);
        }
        fsp(a);fsp(b)
        }
        FFF
        cat >config.yml<<-FFF
        ipv6: true
        #redir-port: 7892
        mixed-port: 7890
        allow-lan: true
        mode: rule
        log-level: silent
        #external-ui: clash_webs
        external-controller: 0.0.0.0:9090
        #tunnels: ["tcp/udp,0.0.0.0:7891,[::1]:7890,DIRECT"]
        rules:  # - SRC-IP-CIDR,0.0.0.0/0,A0
          - GEOIP,CN,B0
          - MATCH,A0
        proxy-providers:
          ps:
            type: http
            interval: 9600
            url: "https://cdn.jsdelivr.net/gh/${GITHUB_REPOSITORY}/config.yml"
            path: s.yml
            health-check:
              enable: true
              lazy: true
              interval: 600
              url: http://www.gstatic.com/generate_204
        proxy-groups:
        FFF
        # sudo ./run.sh || : >> warp.log
        [ 1 ] && touch warp_blocked && echo 'pretending block CF warp'
        [ $(grep '"CN_' speed_short.yaml | grep -v 'type: ss' | wc -l) -gt 3 ] || touch warp_blocked
        echo 'proxies:' > x.yaml
        if [ 1 ];then
        [ -f warp_blocked ] && gawk '{if(match($0,/"name":"CN_([^_]*)_[^"]*"/,a) && !b[a[1]]++ )print}' speed_short.yaml || :
        [ -f warp_blocked ] && (echo -e 'cdn.yaml\nspeed_short.yaml' | gawk -f mixn.awk) || :
        [ ! -f warp_blocked ] && grep -v 'type: ss' speed_short.yaml || :
        [ ! -f warp_blocked ] && gawk '{if(match($0,/"name":"CN_([^_]*)_[^"]*"/,a) && !b[a[1]]++ )print}' speed_short.yaml || :
        [ ! -f warp_blocked ] && grep 'type: ss' speed_short.yaml || :
        fi | gawk  -F '"name":' 'NF == 2 && !b[$1]++ && !a[$2]++' >> x.yaml
        [ -f warp_blocked ] && mode=2
        if [ "$mode" = 2 ];then 
        gawk '{if( ! index($0, "type: ss") && match($0,/("name":"[^"]*")/,a) && match(a[1],/:"[^_]*_([^_]*)_[^"]*"/,b))print a[1]}' x.yaml | gawk -f gen-check.awk | head -n 6666 > check-list.txt
        bash ./check.sh 'HELLO' 'WORLD'
        exit
        fi #END of mode2     
        if [ 1 ];then # mode 1, anyway
        mode=1    
        for data in $(gawk '{if (match($0,/("name":"CN_[^"]*")/,a)){print a[1]} }' x.yaml) ;do        
        [ ! "$data" ] && exit 1
        current_ip=$(gawk -v data=$data 'BEGIN{match(data,/"name":"[^_]*_([^_]*)_[^"]*"/,a);print a[1]}')
        tested_good=$(echo "${cdef}" | sed -n "/${current_ip}/p")
        [ "${tested_good}" ] && continue
        touch cde_0.txt last_g.txt || :
        echo "test cdn-server $data" >&2
        [ -f warp_blocked ] && st=7m || st=15m
        timeout $st ./check.sh "$data" || touch tout && echo "$data" timeout  &
        w=$!
        wait $w
        [ -f tout ] && echo "$data maybe busy,maybe" && rm tout
        ls *.txt | grep -q good || continue
        i=$(($i +1))
        write_i
        last_good=${current_ip}
        cdef="${last_good} ${cdef}"
        echo "$data" >> cde_$i.txt
        cat good*.txt >> cde_$i.txt
        rm last_g.txt && ln -s cde_$i.txt last_g.txt
        [ -f warp_blocked ] && echo "$data" >> cdn.txt
        touch yml_good
        [ $i -eq $limit ] && break      
        done
        fi # END of mode1
        EEE
        chmod 755 check2.sh
        [ -f tmp_0.yaml ] && tt=110 || tt=116
        time_left=$(( $tt - ( $(date '+%s') - $(cat time_a) ) / 60 ))
        [ $time_left -gt 0 ] && timeout ${time_left}m bash ./check2.sh 2 > check2.log || echo "less than expected maybe"
        echo "operartion limited ${time_left}m end"
        if [ -f s1_t ];then
        rm s1_t
        curl -s https://purge.jsdelivr.net/gh/${GITHUB_REPOSITORY}/speed.yaml
        fi
        [ -f warp_on ] && rm warp_on && sudo ./warp.sh dwg >> warp.log || : 
        cat >config.yaml<<-EOF
        ipv6: true
        redir-port: 7892
        socks-port: 7891
        mixed-port: 7890
        allow-lan: true
        mode: rule
        log-level: silent
        #external-ui: clash_webs
        external-controller: 0.0.0.0:9090
        rules:
          - GEOIP,CN,DIRECT
          - MATCH,A0
        proxy-groups:
          - {name: A0, type: select, proxies: [Z1,Z2,R12,DIRECT]}
          - {name: R12, type: relay, proxies: [Z1,Z2]}
          - {name: Z1, type: select, use: [ps,pr], proxies: [DIRECT,REJECT]}
          - {name: Z2, type: select, use: [ps], proxies: [DIRECT,REJECT]}
        proxy-providers:
          pr:
            type: http
            interval: 9600
            url: "https://cdn.jsdelivr.net/gh/${GITHUB_REPOSITORY}/config.yaml"
            path: r.yaml
            filter: '^CN_' 
            health-check:
              enable: false
              lazy: true
              interval: 600
              url: http://www.gstatic.com/generate_204
          ps:
            type: http
            interval: 9600
            url: "https://cdn.jsdelivr.net/gh/${GITHUB_REPOSITORY}/config.yml"
            path: s.yaml
            health-check:
              enable: true
              lazy: true
              interval: 600
              url: http://www.gstatic.com/generate_204
        EOF
        echo '- {password: make-your-own, port: 443, server: "::1", type: trojan,"name":"ZZ_127.0.0.1_DoItYourself-0"}' >> database_3.yaml
        if [ 1 ] ;then
        echo 'proxies:'
        gawk -F '"name":' '{if(NF > 1)a[$1]++}END{i=0;h="ls database*.yaml";while(h | getline f){while(i < 2333 && (getline line < f) > 0){if(split(line,c) && 2 in c && !a[c[1]]++ && match(c[2],/"([^_]*_[^_]*_[^-]*)-[^"]*"/,id) && ++b[id[1]] < 3 && ++i)print c[1] FS "\42" id[1] "-" i "\42}"};close(f)}}' config.yml speed.yaml
        fi >> config.yaml
        [ 1 ] && ./clash -t -f config.yaml -d . && git add config.yaml || cat config.yaml
        [ -f yml_good ] && ./clash -t -f config.yml -d . && git add config.yml || cat config.yml
        git pull  && echo "pull ok" || echo "pull maybe busy,try commit anyway"
        git commit -m "$(date)" && git push -u origin master
        if [ -f yml_good ];then
        rm yml_good
        sleep 15 && curl -s https://purge.jsdelivr.net/gh/${GITHUB_REPOSITORY}/config.yml
        fi
