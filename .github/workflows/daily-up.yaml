name: "clash proxy provider 2"

on:
  schedule:
    - cron: '0 */12 * * *'  
  #push:
  #  branches:
  #     - master

  workflow_dispatch:
jobs:
  job_1:
    name: collect proxies
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
      with:
        fetch-depth: 1
      
    - name: update pool 
      continue-on-error: true
      run: |
        #!/bin/bash
        # buggy script
        # continue with error
        set +e
        show_ip(){
        curl -s http://api64.ipify.org
        }
        show_ip
        if [ ! -e ipvenv ]; then
        python -m venv ipvenv
        fi
        . ipvenv/bin/activate
        python -m pip install  geoip2 & 
        p=$!
        echo virtual env activate
        date
        if [ ! -f pool_etc ];then
        cat >pool_etc<<-EEE
        https://sspool.herokuapp.com/clash/proxies
        EEE
        fi
        down_from_list() {
        while read url;do
        filename=tmp_$RANDOM.yaml
        echo GET $url TO $filename
        ( wget -q -T 15 --no-check-certificate -O $filename $url  && echo $filename job done || echo $url failed)&
        p="$! $p"
        done<$1
        echo download from $1 started
        }
        #down_from_list pool.txt
        down_from_list pool_etc
        echo wait for download
        if [  ! -f clash ]; then
        os_type=linux
        cpu_type=amd64
        clash_bin_url="https://github.com/Dreamacro/clash/releases"
        clash_html=tmp$RANDOM.html
        wget -q -O $clash_html https://github.com/Dreamacro/clash/releases
        clash_bin_url="https://github.com$( cat $clash_html | grep ".gz" | grep "<a href=" | grep $os_type | head | grep $cpu_type | sed -E 's/.*href="([^"]*)".*/\1/' )"
        wget -q -O clash.gz $clash_bin_url
        gunzip clash.gz
        git add clash
        fi
        [ ! -x clash ] && chmod a+x clash
        for i in $p;do
        wait $i
        done
        date
    - name: cloudflare warp
      continue-on-error: true 
      run: |
          set +e  
          warp_url="https://raw.githubusercontent.com/P3TERX/warp.sh/main/warp.sh"
          curl -s -o warp.sh $warp_url || exit 1
          chmod 755 ./warp.sh
          cat >run.sh<<-\EOF
          #!/bin/sh
          [ -f warp.tgz ] && tar xzvf warp.tgz -C /
          ./warp.sh d
          . ./warp.sh
          tar zcvf warp.tgz $WGCF_ProfilePath $WireGuard_ConfPath
          chmod 666 warp.tgz
          m=3
          i=1
          while [ 1 ];do
          r4=0
          r6=0
          ping -c1 -W1 $TestIPv4_1 || ping -c1 -W1 $TestIPv4_2 || r4=1         
          ping6 -c1 -W1 $TestIPv6_1 || ping6 -c1 -W1 $TestIPv6_2 || r6=1
          if [ "a00" = "a$r4$r6" ]; then touch warp_on; break ;fi
          if [ $i -lt $m ]; then i=$(( $i + 1)); ./warp.sh rwg; continue; fi
          ./warp.sh x
          break
          done
          EOF
          chmod 755 ./run.sh
          sudo ./run.sh
    - name: update repo
      continue-on-error: true 
      run: | 
        set +e  
        . ipvenv/bin/activate
        echo working dir is `pwd`
        touch 1.yaml
        uuid=`cat  /proc/sys/kernel/random/uuid`
        np=$(date '+%m%d')${uuid:0:4}-
        for j in speed_short.yaml speed.yaml tmp*.yaml ; do
        cat $j | yq -P 'sort_keys(..) ' | yq 'del(.proxies.[].name) | del(.proxies.[].udp) | del(.proxies.[].sni) | del(.proxies.[].servername) | del(.proxies.[].country) | del (.proxies.[].group) | del(.proxies.[].ws-opts.headers) | del(.proxies.[].ws-headers) | .proxies.[] style="flow"' |sed '/%/d'| sed -n "/}$/p"| sed -n "/port/p" |sed -E 's/ [^ ]*: \{\},//g; s@ws-path: ([^,]*)@ws-opts: {path: \1}@; s/ !<str> ([0-9]+)/ "\1"/g;s/server: ["'"'"']?\[([0-9a-fA-F:]+)]["'"'"']?/server: \1/ ;s/^  - \{//;s/\}$//'  
        done  |awk '!a[$0]++' | awk -v np=$np 'BEGIN{file="x.yaml"; print "proxies:">file ;g="1.yaml";h="./clash -t -f 1.yaml";h|getline t;close(h)}{d="\42name\42:\42_" np NR "\42"; p="  - {" $0 "," d "}";print "proxies:\n"p > g;close(g);h|getline r;close(h);if(match(r,/success/)){print p > file;print  d>"alive-list.txt"}}'
        kw1="microsoft"
        kw2="bing"
        kw3="baidu"
        kw4="sogou"
        kw5="weibo"
        kw6="zhihu"
        kw7="bilibili"
        max_worker=7
        cat >y.yaml<<-EOF
        mixed-port: 7890
        ipv6: true
        mode: rule
        #log-level: silent
        proxy-providers:
         px:
          type: file
          interval: 9600
          path: x.yaml
          health-check:
            enable: false
            interval: 600
            url: http://www.gstatic.com/generate_204
        EOF
        ( # generate rules
        echo 'rules:'
        for i in `seq $max_worker`; do
        kw=$(eval echo '$kw'$i)
        echo "          - DOMAIN-KEYWORD,$kw,S$i"
        done
        echo "          - MATCH,S1"
        # end of rules
        # generate proxy-group
        echo "proxy-groups:"
        for i in `seq $max_worker`; do
        echo "          - {name: S$i, type: select, use: [px]}"
        done 
        # end of prxoy-group 
        ) >> y.yaml
        ./clash -t -d . -f y.yaml || cat y.yaml && error_config=1
        if [ "$error_config" ];then exit 1;fi
        ./clash -d . -f y.yaml  -ext-ctl "127.0.0.1:9090" &
        if [ 1 ]; then
        sleep 3
        fi
        #curl -s  http://127.0.0.1:9090/providers/proxies| awk -F, 'BEGIN{RS="(,\42delay\42)|(,\42udp\42)"}{if(NF == 3 && !match($1,/:0/))print $2 > "alive-list.txt"}'
        timeout=7
        proxy="http://127.0.0.1:7890"
        #proxy2="http://[::1]:7890"
        port=9090
        peer()
        {
        data=$2
        num=$1
        good="good$num.txt"
        bad="bad$num.txt"
        url=$(eval echo https://'$kw'${num}.com)
        t=$(curl -s -X PUT -w "%{http_code}" -d "{$data}" "http://127.0.0.1:$port/proxies/S$num")
        r=$(curl -s -w "%{http_code}" -o /dev/null -m $timeout -x $proxy $url)
        s=$?
        if [ 0200 = "0$r" ] ; then
        file=$good
        elif [ 0302 = "0$r" ] ;then
        file=$good
        elif [ 0301 = "0$r" ] ;then
        file=$good
        else
        file=$bad
        fi
        echo $data $file $t $r $s
        echo $data >> $file
        }
        mkfifo queue
        exec 99<>queue
        worker(){
        while [ 1 ];do
        read -t 3 -u99 data|| break
        # [ 'done' == "$data" ]  && break
        peer "$1" "$data"
        done&
        }
        if [ 1 ];then
        cat alive-list.txt
        fi>&99 &
        p=$!
        for i in `seq $max_worker`;do
        sleep 1
        worker $i
        p="$! $p"
        done
        for w in $p;do
        wait $w
        done
        ls *.txt
        awk 'BEGIN{FS=",";f="speed_short.yaml";print "proxies:" > f;while("ls good*.txt" | getline g){while ((getline n < g) >0)a[n"}"];close(g)}}{if($NF in a)print $0 >f}' x.yaml
        python ./add_ip.py
        [ -f warp_on ] && sudo ./warp.sh x
        sed -Ei 's!"([^"]*)"}#([^#]*)#([^#]*)#$!"\2_\3\1"}!' speed.yaml
        gawk 'BEGIN{print "proxies:"}{if (match($0,/"name":"[^_"]*_([^_]*)_[^_"]*"/,ip)&&!b[ip[1]]++) {if( ! match(ip[1],/:/)){c=gensub(/server: [^,]*/,"server: "ip[1],"g") ;print c}else{print}}}' speed.yaml > speed_short.yaml
        git config --global user.name "jw853355718" 
        git config --global user.email "17853355718@139.com"
        git add Country.mmdb speed_short.yaml speed.yaml warp.tgz
        git commit -m "${np}update"
        git push -u origin master
    - name: update cache
      run: | 
        cat -n x.yaml
        sleep 15
        curl https://purge.jsdelivr.net/gh/jw853355718/clash_233/speed.yaml
    - name: Failure test
      if: failure()
      run: | 
        ls
        echo "Error on running!"
