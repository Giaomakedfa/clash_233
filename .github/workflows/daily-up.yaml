name: "clash proxy provider 2"

on:
  schedule:
    - cron: '0 */8 * * *'  
  #push:
  #  branches:
  #     - master

  workflow_dispatch:
jobs:
  job_1:
    name: collect proxies
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: cloudflare warp
      continue-on-error: true 
      run: |
          set +e  
          warp_url="https://raw.githubusercontent.com/P3TERX/warp.sh/main/warp.sh"
          curl -s -o warp.sh $warp_url || exit 1
          chmod 755 ./warp.sh
          cat >run.sh<<-\EOF
          #!/bin/bash
          [ -f warp.tgz ] && tar xzvf warp.tgz -C /
          ./warp.sh d
          . ./warp.sh
          tar zcvf warp.tgz $WGCF_ProfilePath $WireGuard_ConfPath
          chmod 666 warp.tgz
          m=3
          i=1
          while [ 1 ];do
          r4=0
          r6=0
          ping -c1 -W1 $TestIPv4_1 || ping -c1 -W1 $TestIPv4_2 || r4=1         
          ping6 -c1 -W1 $TestIPv6_1 || ping6 -c1 -W1 $TestIPv6_2 || r6=1
          if [ "a00" = "a$r4$r6" ]; then touch warp_on; chmod 666 warp_on; break ;fi
          if [ $i -lt $m ]; then i=$(( $i + 1)); ./warp.sh rwg; continue; fi
          ./warp.sh x
          break
          done
          EOF
          chmod 755 ./run.sh
          sudo ./run.sh  > warp.log    
    - name: update pool 
      continue-on-error: true
      run: |
        cat >prepare.sh<<-\FFF
        #!/bin/bash
        # buggy script
        # continue with error
        set +e
        show_ip(){
        curl -s http://api64.ipify.org
        }
        show_ip
        if [ ! -e ipvenv ]; then
        python -m venv ipvenv
        fi
        . ipvenv/bin/activate
        python -m pip install  geoip2 & 
        p=$!
        echo virtual env activate
        date
        if [ ! -f pool_etc ];then
        cat >pool_etc<<-EEE
        https://sspool.herokuapp.com/clash/proxies
        EEE
        fi
        down_from_list() {
        while read url;do
        filename=tmp_$RANDOM.yaml
        echo GET $url TO $filename
        ( curl -k -s -o $filename $url  && echo $filename job done || echo $url failed)&
        p="$! $p"
        done<$1
        echo download from $1 started
        }
        #down_from_list pool.txt
        down_from_list pool_etc
        echo wait for download
        if [  ! -f clash ]; then
        os_type=linux
        cpu_type=amd64
        clash_bin_url="https://github.com/Dreamacro/clash/releases"
        clash_html=tmp$RANDOM.html
        wget -q -O $clash_html https://github.com/Dreamacro/clash/releases
        clash_bin_url="https://github.com$( cat $clash_html | grep ".gz" | grep "<a href=" | grep $os_type | head | grep $cpu_type | sed -E 's/.*href="([^"]*)".*/\1/' )"
        wget -q -O clash.gz $clash_bin_url
        gunzip clash.gz
        git add clash
        fi
        [ ! -x clash ] && chmod a+x clash
        for i in $p;do
        wait $i
        done
        date
        FFF
        bash ./prepare.sh > prepare.log
        cat prepare.log
    - name: update repo
      continue-on-error: true 
      run: | 
        uuid=`cat  /proc/sys/kernel/random/uuid`
        export np=$(date '+%m%d')${uuid:0:4}-
        cat >check.sh<<-\EEE
        #!/bin/bash
        set +e  
        . ipvenv/bin/activate
        echo working dir is `pwd`
        if [ "$1" ];then
        [ ! -f z.yaml ] && mv x.yaml z.yaml || :
        ln speed_short.yaml x.yaml || :
        gawk '{if(match($0,/("name":"[^"]*")/,a))print a[1]}' x.yaml > check-list.txt
        else
        echo 'ipv6: true' > 1.yaml
        if [ ! "$np" ];then
        uuid=`cat  /proc/sys/kernel/random/uuid`
        export np=$(date '+%m%d')${uuid:0:4}-
        fi
        gawk 'BEGIN{print "proxies:"}{if (match($0,/"name":"[^_"]*_([^_]*)_[^_"]*"/,ip)&&!b[ip[1]]++) {if( ! match(ip[1],/:/)){c=gensub(/server: [^,]*/,"server: "ip[1],"g") ;print c}else{print}}}' speed_short.yaml > speed_ip.yaml
        awk '!a[$0]++' speed_*.yaml speed.yaml > database.yaml
        cat >gen.awk<<-\EOF
        BEGIN{
          database="database.yaml"
          file="x.yaml"
          print "proxies:">file 
          g="1.yaml"
          h="./clash -t -f 1.yaml 1>/dev/null && echo t || echo f";
          h|getline tf;
          close(h)
        }
        {if(!a[$0]++){
          if(database_closed){
            d="\42name\42:\42_" np NR "\42"
          }else{
            while(1){
              if((getline dl < database) > 0){
                if(index(dl,$0) && match(dl,/"name":"[^_]*_[^_]*_([^_-]*-)/,mp) && d="\42name\42:\42_" mp[1] NR "\42" ) break
                else continue 
              }else{
                close(database) ; database_closed=1 ; d="\42name\42:\42_" np NR "\42"; break }     
            }
          }
          p="  - {" $0 "," d "}";
          print "proxies:\n"p > g;close(g);
          h|getline r;close(h);
          if(index(r,"t")){print p > file;print  d>"check-list.txt"}
        }}
        END{print NR " records in total."}
        EOF
        cat >sub.sed<<-\EOF
        s/ [^ ]*: \{\},//g
        s!ws-path: ([^,]*)!ws-opts: {path: \1}!
        s/ !<str> ([0-9]+)/ "\1"/g
        s/password: ([0-9]+),/password: "\1",/g
        s/server: ["']?\[([0-9a-fA-F:]+)]["']?/server: \1/
        s/^  - \{//
        s/\}$//
        EOF
        for j in database.yaml tmp*.yaml ; do
        echo processing  $j >&2
        cat $j | sed -E 's/(server)*name: [^,]*,*//;s/"name":"[^"]*",*//' | yq -P 'sort_keys(..) ' | yq '.proxies.[] style="flow"' | yq 'del(.proxies.[].name) | del(.proxies.[].udp) | del(.proxies.[].sni) | del(.proxies.[].servername) | del(.proxies.[].country) | del (.proxies.[].group) | del(.proxies.[].ws-opts.headers) | del(.proxies.[].ws-headers) ' | awk 'index($0,"port")&&index($0,"server")' |sed -E -f sub.sed  
        echo $j end  processing $? >&2
        done | gawk -v np="$np" -f gen.awk
        fi
        if [ 1 ];then
        cat >kw.txt<<-EOF
        microsoft
        bing
        baidu
        sogou
        weibo
        zhihu
        bilibili
        qq
        cctv
        jd
        taobao
        sohu
        ifeng
        huanqiu
        douyu
        douyin
        toutiao
        wps
        weixin
        zhibo8
        meituan
        kugou
        EOF
        limit=20
        i=0
        for kwi in $(awk '!a[$0]++' kw.txt);do
        curl -s https://${kwi}.com > /dev/null || continue
        i=$(($i + 1))
        eval kw$i=$kwi  
        [ $i -eq $limit ] && break 
        done
        max_worker=$i
        # [ "a$(sed -n 2p speed_short.yaml)" = "a$(sed -n 2p speed.yaml)" ] && clash_check='true'
        if [ $max_worker -eq 0 -o "a$clash_check" = 'atrue' ]
        then clash_check='true' ; tls='s' 
        else clash_check='false' ; tls='' ;fi
        mport=7890
        cat <<-EOF
        mixed-port: $mport
        ipv6: true
        mode: rule
        #log-level: silent
        proxy-providers:
         px:
          type: file
          interval: 9600
          path: x.yaml
          health-check:
            enable: $clash_check
            interval: 600
            url: http${tls}://www.gstatic.com/generate_204
        EOF
        [ "$1" ] && SR="R" || SR="S"
        echo "rules:"; for i in `seq $max_worker`; do kw=$(eval echo '$kw'$i)
        echo "          - DOMAIN-KEYWORD,$kw,${SR}${i}";done
        echo "          - MATCH,REJECT"
        echo "proxy-groups:";
        [ $SR = R ]  && echo "          - {name: S0, type: select, use: [px], proxies: [DIRECT]}" || :
        for i in `seq $max_worker`; do
        echo "          - {name: S$i, type: select, use: [px]}"
        [ $SR = R ]  && echo "          - {name: R$i, type: relay, proxies: [S0,S$i]}";done 
        fi > y.yaml
        ./clash -t -d . -f y.yaml || error_config=1
        if [ "$error_config" ];then cat y.yaml; exit 1;fi
        port=9090
        ./clash -d . -f y.yaml  -ext-ctl "127.0.0.1:$port" >clash.log &
        if [ $clash_check = 'true' ]; then
        t=$((23+$(awk 'END{print NR}' x.yaml)/33))
        sleep $t
        curl -s  http://127.0.0.1:$port/providers/proxies| awk -F, 'BEGIN{RS="(,\42delay\42)|(,\42udp\42)"}{if(NF == 3 && !match($1,/:0/))print $2 > "goodz.txt"}'
        fi & 
        p="$! $p"
        timeout=15
        try_n=1
        proxy="http://127.0.0.1:$mport"
        peer()
        {
        data=$2
        num=$1
        good="good$num.txt"
        bad="bad$num.txt"
        url=$(eval echo https://'$kw'${num}.com)
        t=$(curl -s -X PUT -w "%{http_code}" -d "{$data}" "http://127.0.0.1:$port/proxies/S$num")
        [ "$t" = "204" ] || return 1
        r=$(curl -s -w "%{http_code}" -o /dev/null --retry $try_n -m $timeout -x $proxy $url)
        s=$?
        if [ 0200 = "0$r" ] ; then
        file=$good
        elif [ 0302 = "0$r" ] ;then
        file=$good
        elif [ 0301 = "0$r" ] ;then
        file=$good
        else
        file=$bad
        fi
        echo $data $file $t $r $s
        echo $data >> $file
        }
        [ -f queue ] && rm queue
        [ -f read_lock ] && rm read_lock
        mkfifo queue
        exec 99<>queue
        mkfifo read_lock
        exec 66<>read_lock
        trap 'rm read_lock queue check-list.txt' EXIT
        get_lock()
        { read -t 3 -u66 lock && return 0 || return 1 ;}
        drop_lock(){
        echo >&66 &
        }
        worker(){
        while [ 1 ];do
        get_lock || break
        read -t 1 -u99 data || end=1
        drop_lock
        [ 01 = "0$end" ] && break
        # [ 'done' == "$data" ]  && break
        peer "$1" "$data"
        done&
        }
        if [ ! $max_worker -eq 0 ];then
        drop_lock
        cat check-list.txt       
        fi>&99 &
        p="$! $p"
        [ "$1" ] && sleep 1 && t0=$(curl -s -X PUT -w "%{http_code}" -d "{$1}" "http://127.0.0.1:$port/proxies/S0") && rm good*.txt bad*.txt || :
        for i in `seq $max_worker`;do
        sleep 1
        worker $i
        p="$! $p"
        done
        if [ $clash_check = 'true' ]; then
        while [ 1 ];do
        sleep 10
        curl -s  http://127.0.0.1:$port/providers/proxies| awk -F, 'BEGIN{RS="(,\42delay\42)|(,\42udp\42)"}{if(NF == 3 && !match($1,/:0/)){a=$2;n++}}END{print n " " a}' >> stat.txt || break
        if [ -f goodz2.txt ]; then break; fi
        done&
        fi
        for w in $p;do
        wait $w
        done
        if [ $clash_check = 'true' ]; then
        curl -s  http://127.0.0.1:$port/providers/proxies| awk -F, 'BEGIN{RS="(,\42delay\42)|(,\42udp\42)"}{if(NF == 3 && !match($1,/:0/))print $2 > "goodz2.txt"}'
        fi 
        killall clash
        # check finished
        ls *.txt
        if [ ! "$1" ];then
        awk 'BEGIN{FS=",";f="speed_short.yaml";print "proxies:" > f;while("ls good*.txt" | getline g){while ((getline n < g) >0)a[n"}"];close(g)}}{if($NF in a)print $0 >f}' x.yaml
        [ "$clash_check" = "true" ] && awk 'BEGIN{FS=",";f="speed_bad.yaml";print "proxies:" > f;while("ls bad*.txt" | getline g){while ((getline n < g) >0)a[n"}"];close(g)}}{if($NF in a)print $0 >f}' speed_short.yaml
        python add_ip.py speed_short.yaml > speed.yaml
        sed -Ei 's!"([^"]*)"}#([^#]*)#([^#]*)$!"\2_\3\1"}!' speed.yaml
        awk 'BEGIN{print "proxies:"}{if (match($0,/"name":"[^_"]*_([^_]*)_[^_"]*"/,ip)&&!b[ip[1]]++) print}' speed.yaml > speed_short.yaml
        #gawk 'BEGIN{print "proxies:"}{if (match($0,/"name":"[^_"]*_([^_]*)_[^_"]*"/,ip)&&!b[ip[1]]++) {if( ! match(ip[1],/:/)){c=gensub(/server: [^,]*/,"server: "ip[1],"g") ;print c}else{print}}}' speed.yaml > speed_short.yaml
        [ ! "$clash_check" = "true" ] && git add speed_short.yaml
        else
        cat good*.txt || :
        fi
        EEE
        chmod 755 check.sh 
        ./check.sh > check.log
        cat >config.yaml<<-EOF
        ipv6: true
        redir-port: 7892
        socks-port: 7891
        mixed-port: 7890
        allow-lan: true
        mode: rule
        log-level: silent
        #external-ui: clash_webs
        external-controller: 0.0.0.0:9090
        #proxies:
        proxy-groups:
          - {name: B0, type: select, proxies: [Z1,A1,RZA,FZ,DIRECT]}
          - {name: A0, type: select, proxies: [A1,Z1,RZA,FZ,DIRECT]}
          - {name: FZ, type: fallback, proxies: [RZA,A1], interval: 600, url: "http://www.gstatic.com/generate_204"}
          - {name: RZA ,type: relay, proxies: [A1,Z1]}
          - {name: Z1, type: select, use: [ps], proxies: [DIRECT]}
          - {name: A1, type: load-balance, use: [ps], strategy: round-robin, interval: 600, url: "http://www.gstatic.com/generate_204"}
        proxy-providers:
          ps:
            type: http
            interval: 9600
            url: "https://cdn.jsdelivr.net/gh/${GITHUB_REPOSITORY}/speed.yaml"
            path: s.yaml
            health-check:
              enable: true
              lazy: true
              interval: 600
              url: http://www.gstatic.com/generate_204
        rules:
          - GEOIP,CN,DIRECT
          #- SRC-IP-CIDR,127.0.0.0/8,B0
          #- SRC-IP-CIDR,192.168.123.6/32,B0
          - MATCH,A0
        EOF
        ./clash -t -f config.yaml && git add config.yaml || :
        if [ $(awk 'END{print NR}' speed_short.yaml) -lt 2 ]; then exit 1;fi      
        [ -f warp_on ] && rm warp_on && sudo ./warp.sh x >> warp.log
        git config --global user.name "jw853355718" 
        git config --global user.email "17853355718@139.com"
        git add Country.mmdb speed.yaml warp.tgz
        git commit -m "${np}update"
        git push -u origin master
    - name: clash.log
      continue-on-error: true 
      run: "cat clash.log || :"
    - name: check.log
      continue-on-error: true 
      run: "cat check.log || :"
    - name: check2
      continue-on-error: true 
      run: |
        cat >check2.sh<<-\EEE
        #!/bin/bash
        limit=7
        i=0
        cat >config.yml<<-FFF
        ipv6: true
        redir-port: 7892
        socks-port: 7891
        mixed-port: 7890
        allow-lan: true
        mode: rule
        log-level: silent
        #external-ui: clash_webs
        external-controller: 0.0.0.0:9090
        #proxies:
        rules:
          - GEOIP,CN,DIRECT
          #- SRC-IP-CIDR,127.0.0.0/8,B0
          #- SRC-IP-CIDR,192.168.123.6/32,B0
          - MATCH,A0
        proxy-groups:
        FFF
        sudo ./run.sh  >> warp.log
        for data in $(awk '{if (match($0,/("name":"CN_[^"]*")/,a)){print a[1]} }' speed_short.yaml) ;do        
        [ ! "$data" ] && exit 1        
        ./check.sh "$data" >> check.log &
        w=$!
        # sleep 3600 && kill $w &
        wait $w
        ls *.txt | grep -q good || continue
        i=$(($i +1))
        cat >>config.yml<<-FFF
          - {name: B$i, type: select, proxies: [$(gawk 'BEGIN{ORS=","}{if(match($0,/"name":"([^"]*)"/,a))print a[1]}' good*.txt) DIRECT]}
          - {name: C$i, type: relay, proxies: [$(gawk -v data=$data 'BEGIN{ORS=" ";match(data,/"name":"([^"]*)"/,a);print a[1]}') , B$i]}        
        FFF
        touch yml_good
        [ $i -eq $limit ] && break      
        done
        cat >>config.yml<<-FFF
          - {name: A0, type: select, proxies: [$(seq $i | awk 'BEGIN{ORS=","}{print "B"$0",C"$0}') $(gawk 'BEGIN{ORS=","}{if(match($0,/"name":"([^"]*)"/,a))print a[1]}' x.yaml) DIRECT]}
        $(cat x.yaml)
        FFF
        EEE
        chmod 755 check2.sh
        bash ./check2.sh > check2.log
        if [ 1 ];then
        curl -s https://purge.jsdelivr.net/gh/${GITHUB_REPOSITORY}/speed.yaml
        # curl -s https://purge.jsdelivr.net/gh/${GITHUB_REPOSITORY}/speed_short.yaml
        fi
        [ -f warp_on ] && rm warp_on && sudo ./warp.sh x
        [ -f yml_good ]&& ./clash -t -f config.yml -d . && git add config.yml && git commit -m "$(date)" && git push -u origin master || cat config.yml
    - name: check2.log
      continue-on-error: true 
      run: "cat check2.log || :"
    - name: warp.log
      continue-on-error: true 
      run: "cat warp.log || :"
    - name: Failure test
      if: failure()
      run: | 
        ls
        echo "Error on running!"
